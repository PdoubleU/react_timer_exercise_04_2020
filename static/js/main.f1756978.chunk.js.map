{"version":3,"sources":["components/TimerLengthControl.js","components/StartStop.js","components/ResetBtn.js","components/Display.js","components/initialState.js","PomodoroClock.js","serviceWorker.js","index.js"],"names":["LengthControler","className","id","this","props","idTitle","title","decrementId","value","onClick","icon","faArrowAltCircleLeft","idLength","style","margin","length","incrementId","faArrowAltCircleRight","React","Component","StartStopControler","state","faHourglassEnd","handleClick","bind","setState","faHourglassStart","ResetButton","faRedoAlt","Display","name","initialSate","brkLength","sesLength","timerState","timerType","timer","intervalID","alarmColor","color","PomodoroClock","initialState","setBreak","setSession","stopStart","resetState","decrementTimer","phaseControl","countDown","warningColors","switchTimer","alarm","clockify","e","lengthModifier","currentTarget","clearInterval","audio","pause","currentTime","setInterval","timeLength","play","stateToModify","operator","currentLength","minutes","Math","floor","seconds","preload","src","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1756978.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleRight, faArrowAltCircleLeft } from  \"@fortawesome/free-solid-svg-icons\";\n\nexport default class LengthControler extends React.Component{\n    render(){\n        return (\n            <div className=\"length-control\">\n                <div id={this.props.idTitle}\n                    className=\"control-title\">{this.props.title}</div>\n                <span className=\"control-container\">\n                    <button id={this.props.decrementId}\n                        className=\"control-btn\"\n                        value='-'\n                        onClick={this.props.onClick}>\n                    <FontAwesomeIcon icon={faArrowAltCircleLeft} className=\"icon\" />\n                    </button>\n                    <div id={this.props.idLength} style={{margin: '0'}}>{this.props.length}</div>\n                    <button id={this.props.incrementId}\n                            className=\"control-btn\"\n                            value='+'\n                            style={{margin: '0'}}\n                            onClick={this.props.onClick}>\n                    <FontAwesomeIcon icon={faArrowAltCircleRight} className=\"icon\"/>\n                    </button>\n                </span>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHourglassEnd, faHourglassStart} from  \"@fortawesome/free-solid-svg-icons\";\n\n\nexport default class StartStopControler extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            icon: faHourglassEnd\n        }\n    this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(){\n        if(this.state.icon === faHourglassEnd){\n            this.setState({icon: faHourglassStart})\n        } else {\n            this.setState({icon: faHourglassEnd})\n        }\n    }\n    render(){\n        return (\n            <span onClick={this.handleClick}>\n            <button id=\"start_stop\"\n                    className=\"start-stop control-btn\"\n                    onClick={this.props.onClick}>\n                <FontAwesomeIcon icon={this.state.icon} className=\"icon\"/>\n            </button>\n            </span>\n        )\n    }\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faRedoAlt } from  \"@fortawesome/free-solid-svg-icons\";\n\nexport default class ResetButton extends React.Component{\n    render(){\n        return (\n            <button id=\"reset\"\n                    className=\"reset control-btn\"\n                    onClick={this.props.onClick}>\n                <FontAwesomeIcon icon={faRedoAlt} className=\"icon\"/>\n            </button>\n        )\n    }\n}","import React from 'react';\n\nexport default class Display extends React.Component{\n    render(){\n        return (\n        <div className=\"display\" >\n            <div id=\"timer-label\" value={this.props.name}>{this.props.name}</div>\n            <div id=\"time-left\"\n                 value={this.props.value}\n                 style={this.props.style}>\n                     {this.props.value}\n            </div>\n        </div>\n        )\n    }\n}","const initialSate = {\n    brkLength: 5,\n    sesLength: 25,\n    timerState: 'stopped',\n    timerType: 'Session',\n    timer: 1500,\n    intervalID: '',\n    alarmColor: {color: 'white'}\n}\nexport default initialSate;\n","import React from 'react';\nimport './App.min.css';\nimport LengthControler from './components/TimerLengthControl';\nimport StartStopControler from './components/StartStop';\nimport ResetButton from './components/ResetBtn';\nimport Display from './components/Display';\nimport initialState from './components/initialState';\n\nclass PomodoroClock extends React.Component {\n  constructor(props){\n    super(props);\n      this.state = initialState;\n  this.setBreak = this.setBreak.bind(this);\n  this.setSession = this.setSession.bind(this);\n  this.stopStart = this.stopStart.bind(this);\n  this.resetState = this.resetState.bind(this);\n  this.decrementTimer = this.decrementTimer.bind(this);\n  this.phaseControl = this.phaseControl.bind(this);\n  this.countDown = this.countDown.bind(this);\n  this.warningColors = this.warningColors.bind(this);\n  this.switchTimer = this.switchTimer.bind(this);\n  this.alarm = this.alarm.bind(this);\n  this.clockify = this.clockify.bind(this);\n  }\n  setBreak(e){\n    this.lengthModifier('brkLength', e.currentTarget.value,\n    this.state.brkLength, 'Break');\n  }\n  setSession(e){\n    this.lengthModifier('sesLength', e.currentTarget.value,\n    this.state.sesLength, 'Session')\n  }\n  resetState(){\n    clearInterval(this.state.intervalID);\n    this.audio.pause();\n    this.audio.currentTime = 0;\n    this.setState(initialState);\n  }\n  stopStart(){\n    // eslint-disable-next-line no-unused-expressions\n    this.state.timerState === 'stopped' ?\n    (this.setState({timerState: 'running'}), this.countDown()\n    ) : (clearInterval(this.state.intervalID),\n    this.setState({timer: this.state.timer, timerState: 'stopped'}))\n\n  }\n  countDown() {\n    this.setState({\n      intervalID: setInterval(() => {\n        this.decrementTimer();\n        this.phaseControl();\n       }, 1000)\n    })\n  }\n  decrementTimer(){\n    this.setState({timer: this.state.timer - 1})\n  }\n  phaseControl() {\n    this.warningColors(this.state.timer);\n    if (this.state.timer === 0) this.alarm();\n    if (this.state.timer < 0) {\n      // eslint-disable-next-line no-unused-expressions\n      this.state.timerType === 'Session' ? (\n        clearInterval(this.state.intervalID),\n        this.switchTimer(this.state.brkLength * 60, 'Break'),\n        this.countDown()\n      ) : (\n        clearInterval(this.state.intervalID),\n        this.switchTimer(this.state.sesLength * 60, 'Session'),\n        this.countDown()\n      );\n    }\n  }\n  switchTimer(timeLength, timerType){\n    this.setState({timer: timeLength, timerType: timerType})\n  }\n  warningColors(timer){\n    timer < 61 ? this.setState({alarmColor: {color: '#a50d0d'}}) :\n    this.setState({alarmColor: {color: 'white'}});\n  }\n  alarm() {\n    this.audio.play();\n  }\n  lengthModifier(stateToModify, operator, currentLength, timerType){\n    if(this.state.timerState === 'running') return;\n    else if (this.state.timerType !== timerType) {\n      if(operator === '+' && currentLength < 60 ) {\n        this.setState({[stateToModify]: currentLength + 1})\n      }\n      else if (operator === '-' && currentLength > 1 ) {\n        this.setState({[stateToModify]: currentLength - 1})\n      }\n    } else {\n      if(operator === '+' && currentLength < 60 ) {\n        this.setState({[stateToModify]: currentLength + 1,\n        timer: currentLength * 60 + 60})\n      }\n      else if (operator === '-' && currentLength > 1 ) {\n        this.setState({[stateToModify]: currentLength - 1,\n          timer: currentLength * 60 - 60})\n      }\n    }\n  }\n  clockify() {\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = this.state.timer - minutes * 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    return minutes + ':' + seconds;\n  }\n\n  render(){\n    return (\n      <div className=\"timer\">\n        <LengthControler  idTitle='break-label'\n                          idLength='break-length'\n                          decrementId='break-decrement'\n                          incrementId='break-increment'\n                          title='Break Length'\n                          length={this.state.brkLength}\n                          onClick={this.setBreak}/>\n        <LengthControler  idTitle= 'session-label'\n                          idLength='session-length'\n                          decrementId='session-decrement'\n                          incrementId='session-increment'\n                          title='Session Length'\n                          length={this.state.sesLength}\n                          onClick={this.setSession}/>\n        <div className=\"control-buttons\">\n        <StartStopControler onClick={this.stopStart}/>\n        <ResetButton onClick={this.resetState}/>\n        </div>\n        <Display  name={this.state.timerType}\n                  value={this.clockify()}\n                  style={this.state.alarmColor}/>\n        <audio id=\"beep\" preload=\"auto\"\n          src=\"https://www.mboxdrive.com/bell.mp3\"\n          ref={(audio) => { this.audio = audio; }} />\n      </div>\n\n    );\n  }\n}\n\nexport default PomodoroClock;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PomodoroClock from './PomodoroClock';\nimport ReactFCCtest from 'react-fcctest';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PomodoroClock/>\n    <ReactFCCtest/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}